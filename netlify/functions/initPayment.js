const crypto = require("crypto");
const fetch = require("node-fetch");

exports.handler = async function (event) {
    console.log("üì• –ó–∞–ø—Ä–æ—Å –∫ Netlify-—Ñ—É–Ω–∫—Ü–∏–∏ initPayment –ø–æ–ª—É—á–µ–Ω");

    if (event.httpMethod !== "POST") {
        return {
            statusCode: 405,
            body: JSON.stringify({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" }),
        };
    }

    try {
        const { amount, id } = JSON.parse(event.body);

        if (!amount || amount <= 0) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞" }),
            };
        }

        if (!id) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞" }),
            };
        }

        console.log("üõí ID —Ç–æ–≤–∞—Ä–∞:", id);

        const terminalKey = "1742653399318";
        const secretKey = "r30oaq%Dk#LyTH3f";
        const orderId = Date.now().toString();
        const notificationUrl = "https://info-products-360.netlify.app/.netlify/functions/paymentCallback";

        const hmacSecret = "abyrepp88p1113dsqwe";
        const secureToken = crypto.createHmac("sha256", hmacSecret).update(id).digest("hex");

        const successUrl = `https://info-products-360.netlify.app/success?id=${id}&token=${secureToken}`;
        const failUrl = `https://info-products-360.netlify.app/fail?id=${id}`;

        const receipt = {
            Email: "shokeator98@gmail.com",
            Phone: "+79244324908",
            Taxation: "usn_income",
            Items: [{
                Name: "–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä",
                Price: amount,
                Quantity: 1,
                Amount: amount,
                Tax: "none",
            }],
        };

        // üîê –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ Receipt)
        const tokenParams = {
            TerminalKey: terminalKey,
            Amount: amount,
            OrderId: orderId,
            Description: `–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ID: ${id}, –∑–∞–∫–∞–∑ ‚Ññ${orderId}`,
            NotificationURL: notificationUrl,
            SuccessURL: successUrl,
            FailURL: failUrl,
            Password: secretKey
        };

        const sortedKeys = Object.keys(tokenParams).sort();
        const tokenString = sortedKeys.map((key) => tokenParams[key]).join("");
        const token = crypto.createHash("sha256").update(tokenString).digest("hex");

        console.log("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", token);

        // üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–æ–∫–µ–Ω –±–µ–∑ Receipt, –Ω–æ Receipt –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–ª–æ)
        const tinkoffResponse = await fetch("https://securepay.tinkoff.ru/v2/Init", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                TerminalKey: terminalKey,
                Amount: amount,
                OrderId: orderId,
                Description: `–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ID: ${id}, –∑–∞–∫–∞–∑ ‚Ññ${orderId}`,
                NotificationURL: notificationUrl,
                SuccessURL: successUrl,
                FailURL: failUrl,
                Token: token,
                Receipt: receipt // –ø–µ—Ä–µ–¥–∞–µ–º, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Ç–æ–∫–µ–Ω–µ
            }),
        });

        const result = await tinkoffResponse.json();
        console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Tinkoff:", result);

        if (result.Success) {
            return {
                statusCode: 200,
                body: JSON.stringify({ paymentUrl: result.PaymentURL }),
            };
        } else {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: result.Message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã" }),
            };
        }

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }),
        };
    }
};
